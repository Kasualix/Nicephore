import org.gradle.api.java.archives.internal.DefaultManifest

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "java" // java plugin is needed for the shadow plugin to work
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "5.1.+"
}


version = '1.17.1-1.0.0'
group = 'com.vandendaelen.nicephore' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'nicephore'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println("Java: ${System.getProperty("java.version")}, JVM: ${System.getProperty("java.vm.version")} (${System.getProperty("java.vendor")}), Arch: ${System.getProperty("os.arch")}");
minecraft {
    mappings channel: 'official', version: '1.17.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                nicephore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                nicephore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'nicephore', '--all', '--output', file('src/generated/resources/')

            mods {
                nicephore {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.58'

    implementation 'com.github.thrau:jarchivelib:1.2.0'
    shade 'com.github.thrau:jarchivelib:1.2.0'
    library 'com.github.thrau:jarchivelib:1.2.0'
}

ext {
    MANIFEST = manifest {
        attributes([
                "Specification-Title": "nicephore",
                "Specification-Vendor": "lotuxpunk",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"lotuxpunk",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    } as DefaultManifest
}

jar {
    manifest.from(MANIFEST)
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.shade]

    relocate "org.rauschig.jarchivelib", "${project.group}.shadow.org.rauschig.jarchivelib"

    manifest.from(MANIFEST)
}

reobf {
    shadowJar { }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}